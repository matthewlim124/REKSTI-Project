import 'package:flutter/material.dart';
import 'package:intl/date_symbol_data_local.dart'; // Import for initializeDateFormatting
import 'package:provider/provider.dart';
import 'package:reksti_app/services/token_service.dart'; // Your TokenStorageService;
import 'package:shared_preferences/shared_preferences.dart'; // For storing last route
import 'package:jwt_decoder/jwt_decoder.dart'; // For checking token expiry
// 1. IMPORT YOUR app.dart FILE
//    *******************************************************************
//    *** CRITICAL: Replace 'your_project_name' with the actual     ***
//    *** name of your project (the 'name:' field in pubspec.yaml). ***
//    *******************************************************************
import 'package:reksti_app/app.dart'; // Ensure this path is correct
import 'package:reksti_app/user_provider.dart';

// --- OPTIONAL: Import for initial setup (examples) ---
// If you plan to use Firebase:
// import 'package:firebase_core/firebase_core.dart';
// import 'firebase_options.dart'; // Usually generated by FlutterFire CLI

// If you plan to use a service locator like GetIt:
// import 'package:your_project_name/core/di/injection_container.dart' as di;

// The 'main' function is the entry point of your Flutter application.
const String lastActiveRouteKey = 'last_active_route';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await initializeDateFormatting('id_ID', null);

  final prefs = await SharedPreferences.getInstance();
  final TokenStorageService tokenStorage =
      TokenStorageService(); // Your service to get token/username

  String determinedInitialRoute = '/login'; // Default to login
  String? sessionUsername; // To store username if session is valid

  try {
    String? token = await tokenStorage.getAccessToken();
    String? username = await tokenStorage.getUsername();

    if (token != null &&
        username != null &&
        username.isNotEmpty &&
        !JwtDecoder.isExpired(token)) {
      // User has a valid token and username, session is active
      sessionUsername = username;
      // Restore last route or default to home
      determinedInitialRoute = prefs.getString(lastActiveRouteKey) ?? '/home';
      print(
        "User session valid. Username: $sessionUsername. Initial route: $determinedInitialRoute",
      );
    } else {
      // No valid token or username, or token expired
      print("No valid session found or token expired. Clearing session data.");
      await tokenStorage.deleteAllTokens(); // Clear token and stored username
      await prefs.remove(lastActiveRouteKey); // Clear last route
      // Also clear any user-specific data from UserProvider's SharedPreferences (like image path)
      // This is tricky here as UserProvider instance is not yet available.
      // The UserProvider's initializeSession will handle loading based on current username.
      // If username is null after deleteAllTokens, UserProvider will load no specific data.
    }
  } catch (e) {
    print("Error during session check: $e. Defaulting to login.");
    // Ensure cleanup in case of error during token check
    await tokenStorage.deleteAllTokens();
    await prefs.remove(lastActiveRouteKey);
    determinedInitialRoute = '/login';
    sessionUsername = null;
  }

  final userProvider = UserProvider();

  runApp(
    MultiProvider(
      // Use MultiProvider if you have more than one provider
      providers: [
        ChangeNotifierProvider.value(value: userProvider),
        // Add other providers here if needed
      ],
      child: MyApp(
        initialRoute: determinedInitialRoute,
        sessionUsername: sessionUsername,
      ), // Your root application widget
    ),
  );
}
